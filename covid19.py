# -*- coding: utf-8 -*-
"""Covid19

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xoOobBwI0Pu59f5_GR4qOlTFEWrMOIEr
"""

# ultima execução do projeto

import datetime
print(datetime.datetime.now())
today = datetime.datetime.now().strftime('%d/%m/%Y')

# imports
import numpy as np
import pandas as pd
import os
import numpy as np

# bokeh packages
from bokeh.io import output_file,show,output_notebook,push_notebook
from bokeh.plotting import figure
from bokeh.models import ColumnDataSource,HoverTool,CategoricalColorMapper
from bokeh.layouts import row,column,gridplot
from bokeh.models.widgets import Tabs,Panel
from bokeh.models import GeoJSONDataSource
output_notebook()

# plotly packages
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
from plotly.graph_objs import *

import json
import geopandas as gpd
import plotly.graph_objects as go
import unidecode

# imports

import numpy as np
import pandas as pd
import os

# # bokeh packages
# from bokeh.io import output_file,show,output_notebook,push_notebook
# from bokeh.plotting import figure
# from bokeh.models import ColumnDataSource,HoverTool,CategoricalColorMapper
# from bokeh.layouts import row,column,gridplot
# from bokeh.models.widgets import Tabs,Panel
# from bokeh.models import GeoJSONDataSource
# output_notebook()

# # plotly packages
# import plotly.express as px
# import plotly.graph_objects as go
# from plotly.subplots import make_subplots
# from plotly.graph_objs import *

# import json
# import geopandas as gpd
# import plotly.graph_objects as go
# import unidecode

data = pd.read_csv('brazil_covid19.csv')
data.head()

data.tail()

"""**Pergunta: A qual período de tempo os dados se referem?**

resposta:
"""

min_date_case = min(data['date'])
max_date_case = max(data['date'])

print(min_date_case)
print(max_date_case)

"""**Pergunta: Qual a incidência diária de casos suspetios, confirmados e mortes noo período?**

resposta: Os gráficos a seguir mostram esta informação para casos suspeitos, confirmados e óbitos. Note que a escala de cada gráfico é diferente, mas que a ordem de crescimento em todos segue de maneira ascendente.

Em 20/03/2020, o Ministério da Saúde passa a declarar estado de transmissão comunitária do COVID-19 no País e, com isso, casos suspeitos deixam de ser contabilizados. Vide [g1, 20/03/2020, 19h26min](https://g1.globo.com/bemestar/coronavirus/noticia/2020/03/20/ministerio-declara-transmissao-comunitaria-nacional-do-novo-coronavirus.ghtml)
"""

# Síntese diária

df2 = data.groupby(['date'])['cases','deaths'].agg('sum')
df2.head()

# Atualiznado com antiga versão do dataset
import plotly.express as px
from plotly.graph_objs import *

old = pd.read_csv('brazil_covid19_old.csv')
old = old.groupby(['date'])['suspects'].agg('sum')

layout = Layout(
    paper_bgcolor=' rgba(0,0,0,0)',
    plot_bgcolor=' rgba(0,0,0,0)',
    xaxis = dict(
        tickmode = 'array',
        tickvals = old.index,
        ticktext = old.index
    ),
    xaxis_title='Data',
    yaxis_title='Quantidade'
)

suspeitos = old.loc[:'2020-03-21']
fig = px.bar(title='Casos suspeitos -- Descontinuado a partir de 21/03/2020', x=suspeitos.index, y=suspeitos)
fig['layout'].update(layout)
fig.show()

import plotly.graph_objects as go
from plotly.subplots import make_subplots
from plotly.graph_objs import *

layout = Layout(
    paper_bgcolor='rgb(0,0,0,0)',
    plot_bgcolor='rgb(0,0,0,0)',
)

fig = make_subplots(rows=2, cols=1, 
                    subplot_titles=('Casos Confirmados até ' + max_date_case, 'Óbitos até ' + max_date_case))
fig.append_trace(go.Bar(name='Confirmados', x=df2.index, y=df2['cases']), row=1, col=1)
fig.append_trace(go.Bar(name='Óbitos', x=df2.index, y=df2['deaths']), row=2, col=1)

fig.update_xaxes(title_text='Data', row=1, col=1)
fig.update_yaxes(title_text='Quantidade', row=1, col=1)
fig.update_xaxes(title_text='Data', row=2, col=1)
fig.update_yaxes(title_text='Quantidade', row=2, col=1)

fig['layout'].update(layout)

fig.show()

import plotly.graph_objects as go

layout = Layout(
    paper_bgcolor='rgba(0, 0, 0, 0)',
    plot_bgcolor=' rgba(0, 0, 0, 0)',
    title='Visualização conjunta de Casos e Óbitos até ' + max_date_case,
)

fig = go.Figure(data=[
    go.Bar(name='Confirmados', x=df2.index, y=df2['cases']),
    go.Bar(name='Óbitos', x=df2.index, y=df2['deaths'])
])

fig.update_xaxes(title_text='Data')
fig.update_yaxes(title_text='Quantidade')
fig.update_layout(barmode='stack')
fig['layout'].update(layout)

fig.show()

"""**Pergunta: Qual a distribuição geográfica dos casos confirmados?**"""

# utils
import unidecode

def remove_accents(a):
  unaccented_string = unidecode.unidecode(a)
  return unaccented_string

import json
import geopandas as gpd
from bokeh.models import GeoJSONDataSource

#data.drop('hour',axis= 1, inplace=True)

atual = max(data['date'])
df3 = data.loc[data['date'] == max(data['date'])].groupby(['state'])['cases', 'deaths'].agg('sum')
df4 = pd.DataFrame({
    'name': df3.index,
    'cases': df3['cases'],
    'deaths': df3['deaths']
})
df4.index= range(0, 27)

brazil = gpd.read_file('brazil_geo.json')

df4['name'] = df4['name'].apply(remove_accents)
df4 = df4.sort_values('name')
brazil['name'] = brazil['name'].apply(remove_accents)
brazil = brazil.sort_values('name')

pop_states = brazil.merge(df4, left_on = 'name', right_on = 'name')
geosource = GeoJSONDataSource(geojson = pop_states.to_json())
merged_json = json.loads(pop_states.to_json())
json_data = json.dumps(merged_json)
geosource = GeoJSONDataSource(geojson = json_data)

from bokeh.io import output_notebook, show, output_file
from bokeh.plotting import figure
from bokeh.models import GeoJSONDataSource, LinearColorMapper, ColorBar, HoverTool
from bokeh.palettes import brewer
from bokeh.palettes import magma, viridis, cividis
from bokeh.layouts import row


def myplot3(geosource, tema, complemento ='', jump=1, high=100):

  tipo = 'Óbitos'
  palette = magma(256)
  if tema.startswith('case'):
    tipo = 'Casos'
    palette = viridis(256)[:248]
  elif tema.startswith('letalidade'):
    tipo = 'Letalidade'
    palette = magma(256)
  elif tema.startswith('leitospor100mil'):
    tipo = 'Leitos de UTI por 100 mil habitantes'
    palette = magma(256)
  elif tema.startswith('leitos'):
    tipo = 'Leitos de UTI'
    palette = viridis(256)[:248]
  elif tema.startswith('testesRapidos'):
    tipo = 'Testes Rápidos'
    palette = viridis(256)[:248]
  elif tema.startswith('testesRTPCR'):
    tipo= 'Testes RT-PCR'
    palette = magma(256)


  palette = palette[::-1] 
  color_mapper = LinearColorMapper(palette = palette, low=0, high = high )

  #Define custom tick labels for color bar.
  if(not tema.startswith('letalidade')):
    d = {}
    for i in range(0, int(high), jump):
      d[str(i)] = str(i)


    d[str(int(high) +1)] = '>'+ str(int(high) + 1)

    hover = HoverTool(tooltips=[('Estado', '@name'),
                                ('Quantidade', '@{'+ tema +'}{%d}')],
                      formatters= {'@{'+ tema +'}' : 'printf'})
    
  elif (tema.startswith('leitos') or tema.startswith('teste')):
    d = {}
    for i in np.arange(0, high+1, jump):
      d[str(round(i, 2))] = str(round(i, 2))
    d[str(high + 1)] = '>' + str(high + 1)
    hover = HoverTool(tooltips = [('Estado', '@name'),
                                  ('Quandidade', '@{'+ tema +'}{%d}')],
                      formatters= {'@{'+tema+'}': 'prinft'})
  
  else:
    d = {}
    for i in np.arange(0, high+0.5, jump):
      d[str(round(i, 2))] = str (round(i, 2))
    d[str(round(high + 0.5, 2))] = '>' + str(round(high +0.5, 2))
    hover = HoverTool(tooltips = [('Estado', '@name'),
                                  ('Taxa', '@{'+tema+'}{%.2f%}')],
                      formatters={'@{'+tema+'}':'printf'})

  tick_labels = d
  
  #create color bar.
  color_bar = ColorBar(color_mapper=color_mapper,
                       label_standoff=8,
                       width = 300,
                       height = 20,
                       border_line_color =None,
                       location = (0, 0),
                       orientation = 'horizontal',
                       major_label_overrides = tick_labels)
  
  #create figure object.
  p = figure(title = tipo + complemento + ' em {0}'.format((datetime.datetime.now()).strftime('%d/%m/%Y')),
             plot_height = 430,
             plot_width = 330,
             toolbar_location = None,
             tools = [hover])
  p.xgrid.grid_line_color = None
  p.ygrid.grid_line_color = None
  p.xaxis.visible = False
  p.yaxis.visible = False

  p.patches('xs',
            'ys',
            source = geosource,
            fill_color = {'field': str(tema),
                          'transform': color_mapper},
            line_color = 'black',
            line_width = 0.25,
            fill_alpha = 1)
  
  p.add_layout(color_bar, 'below')
  return p

show(row(myplot3(geosource = geosource,tema = 'cases',jump = 2000, high = max(df4['cases'])),
         myplot3(geosource = geosource,tema = 'deaths', jump = 1000, high = max(df4['deaths']))))